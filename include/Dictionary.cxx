//
// File generated by rootcint at Mon Sep 29 16:39:07 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME Dictionary
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Dictionary.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void CDecay_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CDecay(void *p = 0);
   static void *newArray_CDecay(Long_t size, void *p);
   static void delete_CDecay(void *p);
   static void deleteArray_CDecay(void *p);
   static void destruct_CDecay(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CDecay*)
   {
      ::CDecay *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CDecay >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CDecay", ::CDecay::Class_Version(), "./DecayEvent.h", 4,
                  typeid(::CDecay), DefineBehavior(ptr, ptr),
                  &::CDecay::Dictionary, isa_proxy, 4,
                  sizeof(::CDecay) );
      instance.SetNew(&new_CDecay);
      instance.SetNewArray(&newArray_CDecay);
      instance.SetDelete(&delete_CDecay);
      instance.SetDeleteArray(&deleteArray_CDecay);
      instance.SetDestructor(&destruct_CDecay);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CDecay*)
   {
      return GenerateInitInstanceLocal((::CDecay*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CDecay*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void CImp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CImp(void *p = 0);
   static void *newArray_CImp(Long_t size, void *p);
   static void delete_CImp(void *p);
   static void deleteArray_CImp(void *p);
   static void destruct_CImp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CImp*)
   {
      ::CImp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CImp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CImp", ::CImp::Class_Version(), "./DecayEvent.h", 56,
                  typeid(::CImp), DefineBehavior(ptr, ptr),
                  &::CImp::Dictionary, isa_proxy, 4,
                  sizeof(::CImp) );
      instance.SetNew(&new_CImp);
      instance.SetNewArray(&newArray_CImp);
      instance.SetDelete(&delete_CImp);
      instance.SetDeleteArray(&deleteArray_CImp);
      instance.SetDestructor(&destruct_CImp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CImp*)
   {
      return GenerateInitInstanceLocal((::CImp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr CDecay::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CDecay::Class_Name()
{
   return "CDecay";
}

//______________________________________________________________________________
const char *CDecay::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CDecay*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CDecay::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CDecay*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CDecay::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CDecay*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CDecay::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CDecay*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr CImp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CImp::Class_Name()
{
   return "CImp";
}

//______________________________________________________________________________
const char *CImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CImp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CImp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void CDecay::Streamer(TBuffer &R__b)
{
   // Stream an object of class CDecay.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CDecay::Class(),this);
   } else {
      R__b.WriteClassBuffer(CDecay::Class(),this);
   }
}

//______________________________________________________________________________
void CDecay::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CDecay.
      TClass *R__cl = ::CDecay::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mulx", &mulx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muly", &muly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaz", &deltaz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaxy", &deltaxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dssd_fire[8]", dssd_fire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag_side", &flag_side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dssd_ex[8]", dssd_ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dssd_ey[8]", dssd_ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dssd_zmult[8]", dssd_zmult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dssd_x[8][5]", dssd_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dssd_y[8][5]", dssd_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NaI_E[3]", NaI_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NaI_T[3]", NaI_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qbeta_E", &Qbeta_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qbeta_T", &Qbeta_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qveto_E", &Qveto_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qveto_T", &Qveto_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_hit", &gc_hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_ch[84]", gc_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_DGFe[84]", gc_DGFe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_TDCs[84]", gc_TDCs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_DGFt[84]", gc_DGFt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_TDCl[84]", gc_TDCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_E[84]", gc_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_T[84]", gc_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_hit", &ab_hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_ch[84]", ab_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_DGFe[84]", ab_DGFe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_TDCs[84]", ab_TDCs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_DGFt[84]", ab_DGFt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_TDCl[84]", ab_TDCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_E[84]", ab_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_T[84]", ab_T);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CDecay(void *p) {
      return  p ? new(p) ::CDecay : new ::CDecay;
   }
   static void *newArray_CDecay(Long_t nElements, void *p) {
      return p ? new(p) ::CDecay[nElements] : new ::CDecay[nElements];
   }
   // Wrapper around operator delete
   static void delete_CDecay(void *p) {
      delete ((::CDecay*)p);
   }
   static void deleteArray_CDecay(void *p) {
      delete [] ((::CDecay*)p);
   }
   static void destruct_CDecay(void *p) {
      typedef ::CDecay current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CDecay

//______________________________________________________________________________
void CImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class CImp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CImp::Class(),this);
   } else {
      R__b.WriteClassBuffer(CImp::Class(),this);
   }
}

//______________________________________________________________________________
void CImp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CImp.
      TClass *R__cl = ::CImp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ts", &ts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tx", &tx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ty", &ty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IfInterest", &IfInterest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta35", &beta35);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta57", &beta57);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta711", &beta711);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aoq37", &aoq37);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zed", &zed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zed", &Zed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagall", &flagall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagTSumX", &flagTSumX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagTOFt", &flagTOFt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagTOFq", &flagTOFq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagReaction", &flagReaction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagdERelation", &flagdERelation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagAngle", &flagAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_hit", &gc_hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_ch[84]", gc_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_DGFe[84]", gc_DGFe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_TDCs[84]", gc_TDCs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_DGFt[84]", gc_DGFt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_TDCl[84]", gc_TDCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_E[84]", gc_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gc_T[84]", gc_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_hit", &ab_hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_ch[84]", ab_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_DGFe[84]", ab_DGFe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_TDCs[84]", ab_TDCs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_DGFt[84]", ab_DGFt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_TDCl[84]", ab_TDCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_E[84]", ab_E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ab_T[84]", ab_T);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CImp(void *p) {
      return  p ? new(p) ::CImp : new ::CImp;
   }
   static void *newArray_CImp(Long_t nElements, void *p) {
      return p ? new(p) ::CImp[nElements] : new ::CImp[nElements];
   }
   // Wrapper around operator delete
   static void delete_CImp(void *p) {
      delete ((::CImp*)p);
   }
   static void deleteArray_CImp(void *p) {
      delete [] ((::CImp*)p);
   }
   static void destruct_CImp(void *p) {
      typedef ::CImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CImp

/********************************************************
* Dictionary.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDictionary();

extern "C" void G__set_cpp_environmentDictionary() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DecayEvent.h");
  G__cpp_reset_tagtableDictionary();
}
#include <new>
extern "C" int G__cpp_dllrevDictionary() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CDecay */
static int G__Dictionary_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CDecay* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CDecay[n];
     } else {
       p = new((void*) gvp) CDecay[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CDecay;
     } else {
       p = new((void*) gvp) CDecay;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictionaryLN_CDecay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CDecay*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CDecay::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CDecay::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CDecay::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CDecay::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CDecay*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CDecay::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CDecay::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CDecay::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CDecay::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dictionary_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CDecay* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CDecay(*(CDecay*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictionaryLN_CDecay));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CDecay G__TCDecay;
static int G__Dictionary_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CDecay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CDecay*) (soff+(sizeof(CDecay)*i)))->~G__TCDecay();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CDecay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CDecay*) (soff))->~G__TCDecay();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dictionary_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CDecay* dest = (CDecay*) G__getstructoffset();
   *dest = *(CDecay*) libp->para[0].ref;
   const CDecay& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CImp */
static int G__Dictionary_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CImp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CImp[n];
     } else {
       p = new((void*) gvp) CImp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CImp;
     } else {
       p = new((void*) gvp) CImp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictionaryLN_CImp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CImp*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CImp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CImp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dictionary_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dictionary_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CImp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CImp(*(CImp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictionaryLN_CImp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CImp G__TCImp;
static int G__Dictionary_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CImp*) (soff+(sizeof(CImp)*i)))->~G__TCImp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CImp*) (soff))->~G__TCImp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dictionary_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CImp* dest = (CImp*) G__getstructoffset();
   *dest = *(CImp*) libp->para[0].ref;
   const CImp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CDecay */

/* CImp */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDictionary {
 public:
  G__Sizep2memfuncDictionary(): p(&G__Sizep2memfuncDictionary::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDictionary::*p)();
};

size_t G__get_sizep2memfuncDictionary()
{
  G__Sizep2memfuncDictionary a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDictionary() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictionaryLN_CDecay))) {
     CDecay *G__Lderived;
     G__Lderived=(CDecay*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictionaryLN_CDecay),G__get_linked_tagnum(&G__DictionaryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictionaryLN_CImp))) {
     CImp *G__Lderived;
     G__Lderived=(CImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictionaryLN_CImp),G__get_linked_tagnum(&G__DictionaryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDictionary() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CDecay */
static void G__setup_memvarCDecay(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictionaryLN_CDecay));
   { CDecay *p; p=(CDecay*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->t)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"t=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mulx)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mulx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muly)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"muly=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaz)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"deltaz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaxy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"deltaxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dssd_fire)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dssd_fire[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flag_side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag_side=",0,"-1: upstream fired; 0: none side fired, 1: downstream fired; 2: both sides fired.");
   G__memvar_setup((void*)((long)(&p->dssd_ex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dssd_ex[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dssd_ey)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dssd_ey[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dssd_zmult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dssd_zmult[8]=",0,"multiplicity in each DSSSD");
   G__memvar_setup((void*)((long)(&p->dssd_x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dssd_x[8][5]=",0,"energy centroid of X in each DSSSD");
   G__memvar_setup((void*)((long)(&p->dssd_y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dssd_y[8][5]=",0,"energy centroid of y in each DSSSD");
   G__memvar_setup((void*)((long)(&p->NaI_E)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NaI_E[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NaI_T)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NaI_T[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Qbeta_E)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Qbeta_E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Qbeta_T)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Qbeta_T=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Qveto_E)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Qveto_E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Qveto_T)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Qveto_T=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_hit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_hit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_ch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_ch[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_DGFe)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_DGFe[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_TDCs)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_TDCs[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_DGFt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_DGFt[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_TDCl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_TDCl[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_E)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gc_E[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_T)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gc_T[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_hit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_hit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_ch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_ch[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_DGFe)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_DGFe[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_TDCs)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_TDCs[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_DGFt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_DGFt[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_TDCl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_TDCl[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_E)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ab_E[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_T)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ab_T[84]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictionaryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CImp */
static void G__setup_memvarCImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictionaryLN_CImp));
   { CImp *p; p=(CImp*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ts)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"ts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tx)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ty)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ty=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IfInterest)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IfInterest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beta35)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beta35=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beta57)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beta57=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beta711)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beta711=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aoq37)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"aoq37=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zed)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Zed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Zed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagall)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagall=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagTSumX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagTSumX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagTOFt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagTOFt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagTOFq)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagTOFq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagReaction)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagReaction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagdERelation)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagdERelation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flagAngle)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flagAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_hit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_hit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_ch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_ch[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_DGFe)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_DGFe[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_TDCs)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_TDCs[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_DGFt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_DGFt[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_TDCl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gc_TDCl[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_E)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gc_E[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gc_T)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gc_T[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_hit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_hit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_ch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_ch[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_DGFe)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_DGFe[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_TDCs)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_TDCs[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_DGFt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_DGFt[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_TDCl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ab_TDCl[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_E)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ab_E[84]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ab_T)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ab_T[84]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictionaryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDictionary() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCDecay(void) {
   /* CDecay */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictionaryLN_CDecay));
   G__memfunc_setup("CDecay",553,G__Dictionary_168_0_1, 105, G__get_linked_tagnum(&G__DictionaryLN_CDecay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__Dictionary_168_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__Dictionary_168_0_3, 85, G__get_linked_tagnum(&G__DictionaryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CDecay::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dictionary_168_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CDecay::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dictionary_168_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CDecay::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dictionary_168_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CDecay::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictionaryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dictionary_168_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dictionary_168_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CDecay::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dictionary_168_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CDecay::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dictionary_168_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CDecay::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dictionary_168_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CDecay::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CDecay", 553, G__Dictionary_168_0_15, (int) ('i'), G__get_linked_tagnum(&G__DictionaryLN_CDecay), -1, 0, 1, 1, 1, 0, "u 'CDecay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CDecay", 679, G__Dictionary_168_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dictionary_168_0_17, (int) ('u'), G__get_linked_tagnum(&G__DictionaryLN_CDecay), -1, 1, 1, 1, 1, 0, "u 'CDecay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCImp(void) {
   /* CImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictionaryLN_CImp));
   G__memfunc_setup("CImp",361,G__Dictionary_169_0_1, 105, G__get_linked_tagnum(&G__DictionaryLN_CImp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__Dictionary_169_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__Dictionary_169_0_3, 85, G__get_linked_tagnum(&G__DictionaryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CImp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dictionary_169_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CImp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dictionary_169_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CImp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dictionary_169_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CImp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictionaryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dictionary_169_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dictionary_169_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CImp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dictionary_169_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CImp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dictionary_169_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CImp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dictionary_169_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CImp::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CImp", 361, G__Dictionary_169_0_15, (int) ('i'), G__get_linked_tagnum(&G__DictionaryLN_CImp), -1, 0, 1, 1, 1, 0, "u 'CImp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CImp", 487, G__Dictionary_169_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dictionary_169_0_17, (int) ('u'), G__get_linked_tagnum(&G__DictionaryLN_CImp), -1, 1, 1, 1, 1, 0, "u 'CImp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDictionary() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDictionary() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDictionary() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DictionaryLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DictionaryLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DictionaryLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DictionaryLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DictionaryLN_CDecay = { "CDecay" , 99 , -1 };
G__linked_taginfo G__DictionaryLN_CImp = { "CImp" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDictionary() {
  G__DictionaryLN_TClass.tagnum = -1 ;
  G__DictionaryLN_TBuffer.tagnum = -1 ;
  G__DictionaryLN_TMemberInspector.tagnum = -1 ;
  G__DictionaryLN_TObject.tagnum = -1 ;
  G__DictionaryLN_CDecay.tagnum = -1 ;
  G__DictionaryLN_CImp.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDictionary() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DictionaryLN_TClass);
   G__get_linked_tagnum_fwd(&G__DictionaryLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DictionaryLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DictionaryLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictionaryLN_CDecay),sizeof(CDecay),-1,291072,(char*)NULL,G__setup_memvarCDecay,G__setup_memfuncCDecay);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictionaryLN_CImp),sizeof(CImp),-1,291072,(char*)NULL,G__setup_memvarCImp,G__setup_memfuncCImp);
}
extern "C" void G__cpp_setupDictionary(void) {
  G__check_setup_version(30051515,"G__cpp_setupDictionary()");
  G__set_cpp_environmentDictionary();
  G__cpp_setup_tagtableDictionary();

  G__cpp_setup_inheritanceDictionary();

  G__cpp_setup_typetableDictionary();

  G__cpp_setup_memvarDictionary();

  G__cpp_setup_memfuncDictionary();
  G__cpp_setup_globalDictionary();
  G__cpp_setup_funcDictionary();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDictionary();
  return;
}
class G__cpp_setup_initDictionary {
  public:
    G__cpp_setup_initDictionary() { G__add_setup_func("Dictionary",(G__incsetup)(&G__cpp_setupDictionary)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDictionary() { G__remove_setup_func("Dictionary"); }
};
G__cpp_setup_initDictionary G__cpp_setup_initializerDictionary;

